mpsz_sf <- st_read(dsn = "data",
layer = "MP14_SUBZONE_WEB_PL")
tm_shape(pg) +
tm_lines() +
tm_shape(Schools) +
tm_dots(col = 'red', text = TRUE)
tm_shape(pg) +
tm_polygons() +
tm_shape(Schools) +
tm_dots(col = 'red', text = TRUE)
tmap_mode('view')
tm_shape(pg) +
tm_polygons() +
tm_shape(Schools) +
tm_dots(col = 'red', text = TRUE)
tm_shape(pg) +
tm_polygons(alpha = 0.1) +
tm_shape(Schools) +
tm_dots(col = 'red', text = TRUE)
tm_shape(pg) +
tm_polygons(alpha = 0.1, thres.poly = 1e-05) +
tm_shape(Schools) +
tm_dots(col = 'red', text = TRUE)
tm_shape(pg) +
tm_polygons(alpha = 0.1) +
tm_shape(Schools) +
tm_dots(col = 'red', text = TRUE)
tm_shape(pg) +
tm_polygons(alpha = 0.5) +
tm_shape(Schools) +
tm_dots(col = 'red', text = TRUE)
tm_shape(pg) +
tm_polygons(alpha = 0.2) +
tm_shape(Schools) +
tm_dots(col = 'red', text = TRUE)
tm_shape(pg) +
tm_polygons(alpha = 0.1) +
tm_shape(Schools) +
tm_dots(col = 'red', text = TRUE)
tm_shape(pg) +
tm_polygons(alpha = 0.1, border.col = "blue") +
tm_shape(Schools) +
tm_dots(col = 'red', text = TRUE)
mpsz_sf <- st_read(dsn = "data",
layer = "MP14_SUBZONE_WEB_PL")
pg = st_union(mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",])
pg = st_union(pg)
mpsz_sf <- st_read(dsn = "data",
layer = "MP14_SUBZONE_WEB_PL")
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
pg = st_union(as.data.frame(pg))
mpsz_sf <- st_read(dsn = "data",
layer = "MP14_SUBZONE_WEB_PL")
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
pg = st_union(st_as_sf(pg))
tmap_mode('view')
tm_shape(pg) +
tm_polygons(alpha = 0.1, border.col = "blue") +
tm_shape(Schools) +
tm_dots(col = 'red', text = TRUE)
mpsz_sf <- st_read(dsn = "data",
layer = "MP14_SUBZONE_WEB_PL")
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
pg = st_union(st_as_sf(pg))
tmap_mode('view')
tm_shape(pg) +
tm_polygons(alpha = 0.1, border.col = "red") +
tm_shape(Schools) +
tm_dots(col = 'red', text = TRUE)
tm_shape(pg) +
tm_polygons(alpha = 0.1, border.col = "red") +
tm_shape(Schools) +
tm_dots(col = 'black', text = TRUE)
mpsz_sf <- st_read(dsn = "data",
layer = "MP14_SUBZONE_WEB_PL")
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
pg = st_union(st_as_sf(pg))
tmap_mode('view')
tm_shape(pg) +
tm_polygons(alpha = 0.1, border.col = "red") +
tm_shape(Schools) +
tm_dots(col = 'black', text = TRUE)
tm_shape(pg) +
tm_polygons(alpha = 0.1, border.col = "red", lwd = 2) +
tm_shape(Schools) +
tm_dots(col = 'black', text = TRUE)
tm_shape(pg) +
tm_polygons(alpha = 0.1, border.col = "red", lwd = 2, shape = "smart-city.png") +
tm_shape(Schools) +
tm_dots(col = 'black', text = TRUE)
tm_shape(pg) +
tm_polygons(alpha = 0.1, border.col = "red", lwd = 2) +
tm_shape(Schools) +
tm_symbols(shape = "smart-city.png")
tm_shape(pg) +
tm_polygons(alpha = 0.1, border.col = "red", lwd = 2) +
tm_shape(Schools) +
tm_symbols(shape = 'smart-city.png', , size = 0.)
tm_shape(pg) +
tm_polygons(alpha = 0.1, border.col = "red", lwd = 2) +
tm_shape(Schools) +
tm_symbols(shape = icon, size = 0.5 , size = 0.)
tm_shape(pg) +
tm_polygons(alpha = 0.1, border.col = "red", lwd = 2) +
tm_shape(Schools) +
tm_symbols(shape = icon, size = 0.5)
mpsz_sf <- st_read(dsn = "data",
layer = "MP14_SUBZONE_WEB_PL")
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
pg = st_union(st_as_sf(pg))
tmap_mode('view')
icon <- tmap_icons("smart-city.png")
tm_shape(pg) +
tm_polygons(alpha = 0.1, border.col = "red", lwd = 2) +
tm_shape(Schools) +
tm_symbols(shape = icon, size = 0.5)
icon <- tmap_icons("smart2.png")
mpsz_sf <- st_read(dsn = "data",
layer = "MP14_SUBZONE_WEB_PL")
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
pg = st_union(st_as_sf(pg))
tmap_mode('view')
icon <- tmap_icons("smart2.png")
tm_shape(pg) +
tm_polygons(alpha = 0.1, border.col = "red", lwd = 2) +
tm_shape(Schools) +
tm_symbols(shape = icon, size = 0.5)
tm_shape(pg) +
tm_polygons(alpha = 0.1, border.col = "red", lwd = 2) +
tm_shape(Schools) +
tm_symbols(shape = icon, size = 0.8)
tm_shape(pg) +
tm_polygons(alpha = 0.1, border.col = "red", lwd = 2) +
tm_shape(Schools) +
tm_symbols(shape = icon, size = 1)
mpsz_sf <- st_read(dsn = "data",
layer = "MP14_SUBZONE_WEB_PL")
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
pg = st_union(st_as_sf(pg))
tmap_mode('view')
icon <- tmap_icons("fsi-header_smart-buildings.png")
tm_shape(pg) +
tm_polygons(alpha = 0.1, border.col = "red", lwd = 2) +
tm_shape(Schools) +
tm_symbols(shape = icon, size = 1)
mpsz_sf <- st_read(dsn = "data",
layer = "MP14_SUBZONE_WEB_PL")
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
pg = st_union(st_as_sf(pg))
tmap_mode('view')
icon <- tmap_icons("fsi-header_smart-buildings.png")
tmap_mode('view')
tm_shape(network) +
tm_lines() +
tm_shape(childcare) +
tm_dots(col = 'red') +
tm_shape(Bus) +
tm_dots(col = 'blue') +
tm_shape(MRT) +
tm_dots(col = 'green') +
tm_shape(Schools) +
tm_dots(col='orange')
mpsz_sf <- st_read(dsn = "data",
layer = "MP14_SUBZONE_WEB_PL")
mpsz_sf <- st_read(dsn = "data",
layer = "MP14_SUBZONE_WEB_PL")
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
pg = st_union(st_as_sf(pg))
tmap_mode('view')
icon <- tmap_icons("fsi-header_smart-buildings.png")
mpsz_sf <- st_read(dsn = "data",
layer = "MP14_SUBZONE_WEB_PL")
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
pg = st_union(st_as_sf(pg))
tmap_mode('view')
icon <- tmap_icons("smart2.png")
tm_shape(pg) +
tm_polygons(alpha = 0.1, border.col = "red", lwd = 2) +
tm_shape(Schools) +
tm_symbols(shape = icon, size = 1)
icon <- tmap_icons("smart-building.png")
tm_shape(pg) +
tm_polygons(alpha = 0.1, border.col = "red", lwd = 2) +
tm_shape(Schools) +
tm_symbols(shape = icon, size = 1)
tm_shape(pg) +
tm_polygons(alpha = 0.1, border.col = "red", lwd = 2) +
tm_shape(Schools) +
tm_symbols(shape = icon, size = 0.7)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(rsconnect)
deployApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
class(mpsz)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
packages = c('readr','sp', 'sf', 'rgdal', 'spNetwork', 'tmap', 'FNN', 'spatstat', "raster")
for (p in packages)
{
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
PDD_Buildings <- read_csv("data/Aspatial/PDD_Buildings.csv")
PDD_Buildings <- st_as_sf(PDD_Buildings, coords = c("LONGITUDE", "LATITUDE"), crs = 4326) %>%
st_transform(crs = 3414)
View(PDD_Buildings)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
MPSZ <- st_read(dsn = "data",
layer = "MP14_SUBZONE_WEB_PL")
packages = c('readr','sp', 'sf', 'rgdal', 'spNetwork', 'tmap', 'FNN', 'spatstat', "raster")
for (p in packages)
{
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
MPSZ <- st_read(dsn = "data",
layer = "MP14_SUBZONE_WEB_PL")
PG <- MPSZ[MPSZ$`SMART SENSORING` == 'PONGGOL', ]
View(PG)
View(MPSZ)
PG <- MPSZ[MPSZ$`PLN_AREA_N` == 'PUNGGOL', ]
PG <- MPSZ[MPSZ$`PLN_AREA_N` == 'PUNGGOL', ]
View(PG)
shiny::runApp()
MPSZ <- st_read(dsn = "data",
layer = "MP14_SUBZONE_WEB_PL")
PG <- MPSZ[MPSZ$`PLN_AREA_N` == 'PUNGGOL', ]
PG <- as_Spatial(PG)
MPSZ <- st_read(dsn = "data",
layer = "MP14_SUBZONE_WEB_PL")
PG <- MPSZ[MPSZ$`PLN_AREA_N` == 'PUNGGOL', ]
PG <- as_Spatial(PG)
runApp()
runApp()
runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
pal <- colorFactor(pal = c("#1b9e77", "#d95f02", "#7570b3"), domain = c("CBRE", "JLL", "SODEXO"))
pal <- colorFactor(pal = c("#1b9e77", "#d95f02", "#7570b3"), domain = c("CBRE", "JLL", "SODEXO"))
runApp()
knitr::opts_chunk$set(echo = TRUE)
packages = c('readr','sp', 'sf', 'rgdal', 'spNetwork', 'tmap', 'FNN', 'spatstat', "raster")
for (p in packages)
{
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
PDD_Buildings <- read_csv("data/Aspatial/PDD_Buildings.csv")
PDD_Buildings <- st_as_sf(PDD_Buildings, coords = c("LONGITUDE", "LATITUDE"), crs = 4326) %>%
st_transform(crs = 3414)
MPSZ <- st_read(dsn = "data",
layer = "MP14_SUBZONE_WEB_PL")
PG <- MPSZ[MPSZ$`PLN_AREA_N` == 'PUNGGOL', ]
PG <- as_Spatial(PG)
knitr::opts_chunk$set(echo = TRUE)
packages = c('readr','sp', 'sf', 'rgdal', 'spNetwork', 'tmap', 'FNN', 'spatstat', "raster")
for (p in packages)
{
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
PDD_Buildings <- read_csv("data/Aspatial/PDD_Buildings.csv")
PDD_Buildings <- st_as_sf(PDD_Buildings, coords = c("LONGITUDE", "LATITUDE"), crs = 4326) %>%
st_transform(crs = 3414)
MPSZ <- st_read(dsn = "data",
layer = "MP14_SUBZONE_WEB_PL")
PG <- MPSZ[MPSZ$`PLN_AREA_N` == 'PUNGGOL', ]
PG <- as_Spatial(PG)
dataset <- PDD_Buildings[, input$FM_Vendor]
dataset <- PDD_Buildings[, `FACILITY MANAGEMENT VENDOR`]
dataset <- PDD_Buildings[, `ADDRESS`]
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
JLD <- st_read(dsn = "data/JLD Boundary",
layer = "JLD Boundary")
knitr::opts_chunk$set(echo = TRUE)
packages = c('readr','sp', 'sf', 'rgdal', 'spNetwork', 'tmap', 'FNN', 'spatstat', "raster")
for (p in packages)
{
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
PDD_Buildings <- read_csv("data/Aspatial/PDD_Buildings.csv")
PDD_Buildings <- st_as_sf(PDD_Buildings, coords = c("LONGITUDE", "LATITUDE"), crs = 4326) %>%
st_transform(crs = 3414)
MPSZ <- st_read(dsn = "data",
layer = "MP14_SUBZONE_WEB_PL")
PG <- MPSZ[MPSZ$`PLN_AREA_N` == 'PUNGGOL', ]
PG <- as_Spatial(PG)
JLD <- st_read(dsn = "data/JLD Boundary",
layer = "JLD Boundary")
JLD <- st_zm(PDD, drop = TRUE, what = "ZM")
View(JLD)
JLD <- st_read(dsn = "data/JLD Boundary",
layer = "JLD Boundary")
JLD <- st_zm(JLD, drop = TRUE, what = "ZM")
Jurong_Lake_District_Boundary <- as_Spatial(JLD)
View(JLD)
JLD <- st_read(dsn = "data/JLD Boundary",
layer = "JLD Boundary")
View(JLD)
Jurong_Lake_District_Boundary <- as_Spatial(JLD)
PDD <- st_read(dsn = "data",
layer = "PDD_Boundary")
PDD <- st_zm(PDD, drop = TRUE, what = "ZM")
Punggol_Digital_District_Boundary <- as_Spatial(PDD)
View(PDD)
View(JLD)
JLD <- st_read(dsn = "data/JID Boundary",
layer = "JID Boundary")
# JLD <- st_zm(JLD, drop = TRUE, what = "ZM")
Jurong_Lake_District_Boundary <- as_Spatial(JLD)
View(JLD)
JLD <- st_read(dsn = "data/JLD Boundary",
layer = "JLD Boundary")
JLD <- st_zm(JLD, drop = TRUE, what = "ZM")
Jurong_Lake_District_Boundary <- as_Spatial(JLD)
View(Jurong_Lake_District_Boundary)
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
packages = c('readr','sp', 'sf', 'rgdal', 'spNetwork', 'tmap', 'FNN', 'spatstat', "raster")
for (p in packages)
{
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
PDD_Buildings <- read_csv("data/Aspatial/PDD_Buildings.csv")
PDD_Buildings <- st_as_sf(PDD_Buildings, coords = c("LONGITUDE", "LATITUDE"), crs = 4326) %>%
st_transform(crs = 3414)
MPSZ <- st_read(dsn = "data",
layer = "MP14_SUBZONE_WEB_PL")
PG <- MPSZ[MPSZ$`PLN_AREA_N` == 'PUNGGOL', ]
PG <- as_Spatial(PG)
PDD <- st_read(dsn = "data",
layer = "PDD_Boundary")
PDD <- st_zm(PDD, drop = TRUE, what = "ZM")
Punggol_Digital_District_Boundary <- as_Spatial(PDD)
JID <- st_read(dsn = "data/JID Boundary",
layer = "JID")
View(JID)
JID <- st_zm(JID, drop = TRUE, what = "ZM")
Jurong_Innovation_District_Boundary <- as_Spatial(JID)
View(JID)
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
packages = c('readr','sp', 'sf', 'rgdal', 'spNetwork', 'tmap', 'FNN', 'spatstat', "raster")
for (p in packages)
{
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
PDD_Buildings <- read_csv("data/Aspatial/PDD_Buildings.csv")
PDD_Buildings <- st_as_sf(PDD_Buildings, coords = c("LONGITUDE", "LATITUDE"), crs = 4326) %>%
st_transform(crs = 3414)
View(PDD_Buildings)
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
